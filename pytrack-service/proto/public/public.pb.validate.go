// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/public/public.proto

package public

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CarRouteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CarRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CarRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CarRouteRequestMultiError, or nil if none found.
func (m *CarRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CarRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetTaxiId(); val <= 0 || val >= 10000 {
		err := CarRouteRequestValidationError{
			field:  "TaxiId",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CarRouteRequestMultiError(errors)
	}

	return nil
}

// CarRouteRequestMultiError is an error wrapping multiple validation errors
// returned by CarRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type CarRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarRouteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarRouteRequestMultiError) AllErrors() []error { return m }

// CarRouteRequestValidationError is the validation error returned by
// CarRouteRequest.Validate if the designated constraints aren't met.
type CarRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarRouteRequestValidationError) ErrorName() string { return "CarRouteRequestValidationError" }

// Error satisfies the builtin error interface
func (e CarRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarRouteRequestValidationError{}

// Validate checks the field values on CarRouteReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CarRouteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CarRouteReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CarRouteReplyMultiError, or
// nil if none found.
func (m *CarRouteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CarRouteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaxiId

	for idx, item := range m.GetPositions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CarRouteReplyValidationError{
						field:  fmt.Sprintf("Positions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CarRouteReplyValidationError{
						field:  fmt.Sprintf("Positions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CarRouteReplyValidationError{
					field:  fmt.Sprintf("Positions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CarRouteReplyMultiError(errors)
	}

	return nil
}

// CarRouteReplyMultiError is an error wrapping multiple validation errors
// returned by CarRouteReply.ValidateAll() if the designated constraints
// aren't met.
type CarRouteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarRouteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarRouteReplyMultiError) AllErrors() []error { return m }

// CarRouteReplyValidationError is the validation error returned by
// CarRouteReply.Validate if the designated constraints aren't met.
type CarRouteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarRouteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarRouteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarRouteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarRouteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarRouteReplyValidationError) ErrorName() string { return "CarRouteReplyValidationError" }

// Error satisfies the builtin error interface
func (e CarRouteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarRouteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarRouteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarRouteReplyValidationError{}

// Validate checks the field values on CarPosition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CarPosition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CarPosition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CarPositionMultiError, or
// nil if none found.
func (m *CarPosition) ValidateAll() error {
	return m.validate(true)
}

func (m *CarPosition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return CarPositionMultiError(errors)
	}

	return nil
}

// CarPositionMultiError is an error wrapping multiple validation errors
// returned by CarPosition.ValidateAll() if the designated constraints aren't met.
type CarPositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarPositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarPositionMultiError) AllErrors() []error { return m }

// CarPositionValidationError is the validation error returned by
// CarPosition.Validate if the designated constraints aren't met.
type CarPositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarPositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarPositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarPositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarPositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarPositionValidationError) ErrorName() string { return "CarPositionValidationError" }

// Error satisfies the builtin error interface
func (e CarPositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarPositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarPositionValidationError{}
